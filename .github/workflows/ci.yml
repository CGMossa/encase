# MSRV and minimal-versions check
# cargo msrv verify -- cargo minimal-versions check --workspace --all-features

# check format
# cargo fmt --check --all

# check clippy
# cargo clippy --all-targets --workspace --all-features -- -D warnings

# check doc tests
# cargo test --doc --workspace --features mint,glam

# run tests and generate coverage report
# cargo +nightly llvm-cov --html --workspace --features mint,glam

# generate docs
# RUSTDOCFLAGS="--cfg docs" cargo +nightly doc --workspace --all-features

name: CI

on: [pull_request, push]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  NIGHTLY: nightly-2022-05-05

# overwrite cache not possible https://github.com/actions/toolkit/issues/658#issuecomment-1019398065

jobs:
  update_cargo_index:
    name: Update cargo index
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "INDEX_HASH=$(git ls-remote https://github.com/rust-lang/crates.io-index.git HEAD)" >> $GITHUB_ENV

      - name: Check if index is already cached
        id: cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.cargo/registry/index/
          key: cargo-registry-index-${{ env.INDEX_HASH }}
          restore-keys: cargo-registry-index-

      # https://github.com/rust-lang/cargo/issues/10319#issuecomment-1019428982
      - if: steps.cache.outputs.cache-hit != 'true'
        run: cargo install empty-library || true

      - name: Cache registry index
        if: steps.cache.outputs.cache-hit != 'true'
        uses: martijnhols/actions-cache/save@v3
        with:
          path: |
            ~/.cargo/registry/index/
          key: cargo-registry-index-${{ env.INDEX_HASH }}

  install_binaries:
    name: Install ${{ matrix.tool.name }} binary
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tool:
          - name: sd
            version: 0.7.6
          - name: jql
            version: 4.0.3
          - name: cargo-hack
            version: 0.5.12
          - name: sccache
            version: 0.3.0
            extra: --no-default-features
    steps:
      - name: Check if binary is already cached
        id: cache
        uses: martijnhols/actions-cache/check@v3
        with:
          path: |
            ~/.cargo/bin/${{ matrix.tool.name }}
          key: ---cargo-binaries-${{ runner.os }}-${{ matrix.tool.name }}-${{ matrix.tool.version }}

      - name: Install binary
        if: steps.cache.outputs.cache-hit != 'true'
        run: cargo install ${{ matrix.tool.name }} --version '=${{ matrix.tool.version }}' ${{ matrix.tool.extra }}

      - name: Save binary to cache
        if: steps.cache.outputs.cache-hit != 'true'
        uses: martijnhols/actions-cache/save@v3
        with:
          path: |
            ~/.cargo/bin/${{ matrix.tool.name }}
          key: ---cargo-binaries-${{ runner.os }}-${{ matrix.tool.name }}-${{ matrix.tool.version }}

  toolchain_msrv:
    name: Install MSRV toolchain
    runs-on: ubuntu-latest
    needs: [install_binaries]
    steps:
      - uses: actions/checkout@v3

      - name: Restore sd bin from cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.cargo/bin/sd
          key: ---cargo-binaries-${{ runner.os }}-sd-0.7.6
          required: true

      # workaround for https://github.com/rust-lang/rustup/issues/2925
      - name: Set environment variables
        run: |
          echo "MSRV=$(cargo metadata --format-version=1 --no-deps --offline | sd '.*"rust_version":"([.0-9]+?)".*' '$1')" >> $GITHUB_ENV
          echo "HOST=$(rustc -vV | sd '(?s:.*host: (.+?)\n.*)' '$1')" >> $GITHUB_ENV

      - run: echo "TOOLCHAIN_NAME=$MSRV" >> $GITHUB_ENV
      - run: echo "TOOLCHAIN_FULL_NAME=$TOOLCHAIN_NAME-$HOST" >> $GITHUB_ENV
      - run: echo "TOOLCHAIN_KEY=toolchain-$TOOLCHAIN_FULL_NAME" >> $GITHUB_ENV

      - name: Check if toolchain is already cached
        id: cache
        uses: martijnhols/actions-cache/check@v3
        with:
          path: |
            ~/.rustup/toolchains/${{ env.TOOLCHAIN_FULL_NAME }}
            ~/.rustup/update-hashes/${{ env.TOOLCHAIN_FULL_NAME }}
          key: ---${{ env.TOOLCHAIN_KEY }}

      - name: Install toolchain
        run: rustup toolchain install $TOOLCHAIN_NAME --no-self-update --profile=minimal
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Save toolchain to cache
        if: steps.cache.outputs.cache-hit != 'true'
        uses: martijnhols/actions-cache/save@v3
        with:
          path: |
            ~/.rustup/toolchains/${{ env.TOOLCHAIN_FULL_NAME }}
            ~/.rustup/update-hashes/${{ env.TOOLCHAIN_FULL_NAME }}
          key: ---${{ env.TOOLCHAIN_KEY }}

  toolchain_nightly:
    name: Install nightly toolchain
    runs-on: ubuntu-latest
    needs: [install_binaries]
    steps:

      - name: Restore sd bin from cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.cargo/bin/sd
          key: ---cargo-binaries-${{ runner.os }}-sd-0.7.6
          required: true

      # workaround for https://github.com/rust-lang/rustup/issues/2925
      - name: Set environment variables
        run: |
          echo "HOST=$(rustc -vV | sd '(?s:.*host: (.+?)\n.*)' '$1')" >> $GITHUB_ENV

      - run: echo "TOOLCHAIN_NAME=$NIGHTLY" >> $GITHUB_ENV
      - run: echo "TOOLCHAIN_FULL_NAME=$TOOLCHAIN_NAME-$HOST" >> $GITHUB_ENV
      - run: echo "TOOLCHAIN_KEY=toolchain-$TOOLCHAIN_FULL_NAME" >> $GITHUB_ENV

      - name: Check if toolchain is already cached
        id: cache
        uses: martijnhols/actions-cache/check@v3
        with:
          path: |
            ~/.rustup/toolchains/${{ env.TOOLCHAIN_FULL_NAME }}
            ~/.rustup/update-hashes/${{ env.TOOLCHAIN_FULL_NAME }}
          key: ---${{ env.TOOLCHAIN_KEY }}

      - name: Install toolchain
        run: rustup toolchain install $TOOLCHAIN_NAME --no-self-update --profile=minimal
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Save toolchain to cache
        if: steps.cache.outputs.cache-hit != 'true'
        uses: martijnhols/actions-cache/save@v3
        with:
          path: |
            ~/.rustup/toolchains/${{ env.TOOLCHAIN_FULL_NAME }}
            ~/.rustup/update-hashes/${{ env.TOOLCHAIN_FULL_NAME }}
          key: ---${{ env.TOOLCHAIN_KEY }}

  msrv_and_minimal_versions:
    name: Check MSRV and minimal-versions
    runs-on: ubuntu-latest
    needs: [install_binaries, toolchain_msrv, toolchain_nightly, update_cargo_index]
    env:
      RUSTC_WRAPPER: sccache
      CARGO_INCREMENTAL: false
      SCCACHE_CACHE_SIZE: 2G
      # SCCACHE_RECACHE: 1 # Uncomment this to clear cache, then comment it back out
    steps:
      - uses: actions/checkout@v3

      - name: Restore sd bin from cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.cargo/bin/sd
          key: ---cargo-binaries-${{ runner.os }}-sd-0.7.6
          required: true

      # - name: Restore jql bin from cache
      #   uses: martijnhols/actions-cache/restore@v3
      #   with:
      #     path: |
      #       ~/.cargo/bin/jql
      #     key: ---cargo-binaries-${{ runner.os }}-jql-4.0.3
      #     required: true

      - name: Restore cargo-hack bin from cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.cargo/bin/cargo-hack
          key: ---cargo-binaries-${{ runner.os }}-cargo-hack-0.5.12
          required: true

      - name: Restore sccache bin from cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.cargo/bin/sccache
          key: ---cargo-binaries-${{ runner.os }}-sccache-0.3.0
          required: true

      # workaround for https://github.com/rust-lang/rustup/issues/2925
      - run: echo "MSRV=$(cargo metadata --format-version=1 --no-deps --offline | sd '.*"rust_version":"([.0-9]+?)".*' '$1')" >> $GITHUB_ENV

      - run: |
          echo "HOST=$(rustc -vV | sed -n 's|host: ||p')" >> $GITHUB_ENV

      - run: |
          echo "MSRV_KEY=toolchain-$MSRV-$HOST" >> $GITHUB_ENV
          echo "NIGHTLY_KEY=toolchain-$NIGHTLY-$HOST" >> $GITHUB_ENV

      - name: Restore MSRV toolchain from cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.rustup/toolchains/${{ env.MSRV }}-${{ env.HOST }}
            ~/.rustup/update-hashes/${{ env.MSRV }}-${{ env.HOST }}
          key: ---${{ env.MSRV_KEY }}
          required: true

      - name: Restore nightly toolchain from cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.rustup/toolchains/${{ env.NIGHTLY }}-${{ env.HOST }}
            ~/.rustup/update-hashes/${{ env.NIGHTLY }}-${{ env.HOST }}
          key: ---${{ env.NIGHTLY_KEY }}
          required: true

      # - name: Restore nightly toolchain from cache
      #   id: cache-nightly
      #   uses: martijnhols/actions-cache/restore@v3
      #   with:
      #     path: |
      #       ~/.rustup/toolchains/${{ env.NIGHTLY }}-${{ env.HOST }}
      #       ~/.rustup/update-hashes/${{ env.NIGHTLY }}-${{ env.HOST }}
      #     key: toolchain-${{ env.NIGHTLY }}-${{ env.HOST }}

      # - run: |
      #     echo "initial-toolchain-nightly-version<<EOF" >> $GITHUB_ENV
      #     echo "" >> $GITHUB_ENV
      #     echo "$(rustc +$NIGHTLY -vV)" >> $GITHUB_ENV
      #     echo "components:" >> $GITHUB_ENV
      #     echo "$(rustup component list --installed --toolchain $NIGHTLY)" >> $GITHUB_ENV
      #     echo "EOF" >> $GITHUB_ENV
      #   if: steps.cache-nightly.outputs.cache-hit == 'true'

      # - run: rustup toolchain install $NIGHTLY --no-self-update --profile=minimal

      # - run: |
      #     echo "updated-toolchain-nightly-version<<EOF" >> $GITHUB_ENV
      #     echo "" >> $GITHUB_ENV
      #     echo "$(rustc +$NIGHTLY -vV)" >> $GITHUB_ENV
      #     echo "components:" >> $GITHUB_ENV
      #     echo "$(rustup component list --installed --toolchain $NIGHTLY)" >> $GITHUB_ENV
      #     echo "EOF" >> $GITHUB_ENV

      # - name: Save nightly toolchain to cache
      #   if: env.initial-toolchain-nightly-version != env.updated-toolchain-nightly-version
      #   uses: martijnhols/actions-cache/save@v3
      #   with:
      #     path: |
      #       ~/.rustup/toolchains/${{ env.NIGHTLY }}-${{ env.HOST }}
      #       ~/.rustup/update-hashes/${{ env.NIGHTLY }}-${{ env.HOST }}
      #     key: ${{ steps.cache-nightly.outputs.primary-key }}

      - name: Restore cargo registry index from cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.cargo/registry/index/
          key: cargo-registry-index-
          restore-keys: cargo-registry-index-
          required: true

      # -Z avoid-dev-deps doesn't work
      - run: cargo +$NIGHTLY hack generate-lockfile --remove-dev-deps -Z minimal-versions --offline

      # - run: |
      #     cargo metadata --format-version=1 --no-deps --offline | jql '.."packages"|"dependencies"' | jql '[]|={"kind":"null"}' > dependencies.json

      # https://github.com/rust-lang/cargo/issues/8841
      # https://github.com/tensorflow/tensorboard/pull/4480#issuecomment-745904483
      # https://doc.rust-lang.org/cargo/guide/cargo-home.html
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cache/sccache/
          key: ${{ runner.os }}-cargo-minimal-versions-${{ hashFiles('Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-minimal-versions-

      # - name: Cache sccache
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.cache/sccache
      #     key: ${{ runner.os }}-sccache-minimal-versions-${{ hashFiles('Cargo.lock') }}
      #     restore-keys: ${{ runner.os }}-sccache-minimal-versions-

      - if: steps.cache.outputs.cache-hit
        run: |
          echo "OFFLINE=--offline" >> $GITHUB_ENV

      - run: cargo +$MSRV check --workspace --all-features $OFFLINE

      - run: sccache --show-stats

  format:
    name: Check format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: cargo fmt --check --all

  clippy:
    name: Check clippy
    runs-on: ubuntu-latest
    needs: [install_binaries, update_cargo_index]
    env:
      RUSTC_WRAPPER: sccache
      CARGO_INCREMENTAL: false
      SCCACHE_CACHE_SIZE: 2G
      # SCCACHE_RECACHE: 1 # Uncomment this to clear cache, then comment it back out
    steps:
      - uses: actions/checkout@v3

      - name: Restore sccache bin from cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.cargo/bin/sccache
          key: ---cargo-binaries-${{ runner.os }}-sccache-0.3.0
          required: true

      # - run: |
      #     echo "HOST=$(rustc -vV | sed -n 's|host: ||p')" >> $GITHUB_ENV

      # - name: Restore toolchain from cache
      #   id: cache
      #   uses: martijnhols/actions-cache/restore@v3
      #   with:
      #     path: |
      #       ~/.rustup/toolchains/stable-${{ env.HOST }}
      #       ~/.rustup/update-hashes/stable-${{ env.HOST }}
      #     key: toolchain-stable-${{ env.HOST }}


      # echo "TOOLCHAIN_VERSION<<EOF" >> $GITHUB_ENV
      # echo "" >> $GITHUB_ENV
      # echo "$(rustc +stable -vV)" >> $GITHUB_ENV
      # echo "components:" >> $GITHUB_ENV
      # echo "$(rustup component list --installed --toolchain stable)" >> $GITHUB_ENV
      # echo "EOF" >> $GITHUB_ENV
      #   if: steps.cache.outputs.cache-hit == 'true'

      # - run: rustup toolchain install stable --no-self-update --profile=minimal --component rustfmt,clippy

      # - run: |
      #     echo "updated-toolchain-version<<EOF" >> $GITHUB_ENV
      #     echo "" >> $GITHUB_ENV
      #     echo "$(rustc +stable -vV)" >> $GITHUB_ENV
      #     echo "components:" >> $GITHUB_ENV
      #     echo "$(rustup component list --installed --toolchain stable)" >> $GITHUB_ENV
      #     echo "EOF" >> $GITHUB_ENV

      # - name: Save toolchain to cache
      #   if: env.initial-toolchain-version != env.updated-toolchain-version
      #   uses: martijnhols/actions-cache/save@v3
      #   with:
      #     path: |
      #       ~/.rustup/toolchains/stable-${{ env.HOST }}
      #       ~/.rustup/update-hashes/stable-${{ env.HOST }}
      #     key: ${{ steps.cache.outputs.primary-key }}

      # - run: |
      #     rustc -vV > TOOLCHAIN_VERSION
      # - run: |
      #     cargo metadata --format-version=1 --no-deps --offline | jql '.."packages"|"dependencies"' | jql '[]|={"kind":"null"}' > dependencies.json

      # get or update index

      # generate lock file

      # hash lock file for

      # - name: Cache dependencies
      #   id: cache
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.cargo/registry/index/
      #       ~/.cargo/registry/cache/
      #       ~/.cargo/git/db/
      #     key: ${{ runner.os }}-cargo-minimal-versions-${{ hashFiles('dependencies.json') }}
      #     restore-keys: ${{ runner.os }}-cargo-minimal-versions-

      # - name: Cache sccache
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.cache/sccache
      #     key: ${{ runner.os }}-sccache-${{ hashFiles('TOOLCHAIN_VERSION') }}-${{ hashFiles('dependencies.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-sccache-${{ hashFiles('TOOLCHAIN_VERSION') }}

      - name: Restore cargo registry index from cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.cargo/registry/index/
          key: cargo-registry-index-
          restore-keys: cargo-registry-index-
          required: true

      # -Z no-index-update
      - run: cargo generate-lockfile

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cache/sccache/
          key: ${{ runner.os }}-cargo-dependencies-${{ hashFiles('Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-dependencies-

      - if: steps.cache.outputs.cache-hit
        run: |
          echo "OFFLINE=--offline" >> $GITHUB_ENV

      - run: cargo clippy --all-targets --workspace --all-features $OFFLINE -- -D warnings

      - run: sccache --show-stats

  doc_tests:
    name: Run doc tests
    runs-on: ubuntu-latest
    needs: [install_binaries, update_cargo_index]
    env:
      RUSTC_WRAPPER: sccache
      CARGO_INCREMENTAL: false
      SCCACHE_CACHE_SIZE: 2G
      # SCCACHE_RECACHE: 1 # Uncomment this to clear cache, then comment it back out
    steps:
      - uses: actions/checkout@v3

      - name: Restore sccache bin from cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.cargo/bin/sccache
          key: ---cargo-binaries-${{ runner.os }}-sccache-0.3.0
          required: true

      - name: Restore cargo registry index from cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.cargo/registry/index/
          key: cargo-registry-index-
          restore-keys: cargo-registry-index-
          required: true

      # -Z no-index-update
      - run: cargo generate-lockfile

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cache/sccache/
          key: ${{ runner.os }}-cargo-dependencies-${{ hashFiles('Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-dependencies-

      - if: steps.cache.outputs.cache-hit
        run: |
          echo "OFFLINE=--offline" >> $GITHUB_ENV

      - run: cargo test --doc --workspace --all-features $OFFLINE

      - run: sccache --show-stats

