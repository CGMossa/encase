name: CI

on: [pull_request, push]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  NIGHTLY: nightly-2022-05-05

# overwrite cache not possible https://github.com/actions/toolkit/issues/658#issuecomment-1019398065

jobs:
  toolchain_msrv:
    name: Install or update MSRV toolchain
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # FIX: this will be stuck on sd v0.7
      - name: Cache cargo files
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ github.job }}-sd^0.7

      - run: cargo install sd --version ^0.7

      # workaround for https://github.com/rust-lang/rustup/issues/2925
      - name: Set environment variables
        run: |
          echo "MSRV=$(cargo metadata --format-version=1 --no-deps | sd '.*"rust_version":"([.0-9]+?)".*' '$1')" >> $GITHUB_ENV
          echo "HOST=$(rustc -vV | sd '(?s:.*host: (.+?)\n.*)' '$1')" >> $GITHUB_ENV

      - run: echo "TOOLCHAIN_NAME=$MSRV" >> $GITHUB_ENV
      - run: echo "TOOLCHAIN_FULL_NAME=$TOOLCHAIN_NAME-$HOST" >> $GITHUB_ENV
      - run: echo "TOOLCHAIN_KEY=toolchain-$TOOLCHAIN_FULL_NAME" >> $GITHUB_ENV

      - name: Restore toolchain key artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact-${{ env.TOOLCHAIN_KEY }}
        continue-on-error: true

      - run: echo "${{ hashFiles('$TOOLCHAIN_KEY') }}"

      - name: Restore toolchain from cache
        id: cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.rustup/toolchains/${{ env.TOOLCHAIN_FULL_NAME }}
            ~/.rustup/update-hashes/${{ env.TOOLCHAIN_FULL_NAME }}
          key: ${{ env.TOOLCHAIN_KEY }}-${{ hashFiles(env.TOOLCHAIN_KEY) }}

      - name: Set initial toolchain version to environment variable
        run: |
          echo "initial_toolchain_version<<EOF" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$(rustc +$TOOLCHAIN_NAME -vV)" >> $GITHUB_ENV
          echo "components:" >> $GITHUB_ENV
          echo "$(rustup component list --installed --toolchain $TOOLCHAIN_NAME)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: steps.cache.outputs.cache-hit

      - name: Install or update toolchain
        run: rustup toolchain install $TOOLCHAIN_NAME --no-self-update --profile=minimal

      - name: Set updated toolchain version to environment variable
        run: |
          echo "updated_toolchain_version<<EOF" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$(rustc +$TOOLCHAIN_NAME -vV)" >> $GITHUB_ENV
          echo "components:" >> $GITHUB_ENV
          echo "$(rustup component list --installed --toolchain $TOOLCHAIN_NAME)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Save toolchain version to key file
        run: echo $updated_toolchain_version > $TOOLCHAIN_KEY
        if: env.initial_toolchain_version != env.updated_toolchain_version

      - name: Save toolchain to cache
        if: env.initial_toolchain_version != env.updated_toolchain_version
        uses: martijnhols/actions-cache/save@v3
        with:
          path: |
            ~/.rustup/toolchains/${{ env.TOOLCHAIN_FULL_NAME }}
            ~/.rustup/update-hashes/${{ env.TOOLCHAIN_FULL_NAME }}
          key: ${{ env.TOOLCHAIN_KEY }}-${{ hashFiles(env.TOOLCHAIN_KEY) }}

      - name: Save toolchain key artifact
        if: env.initial_toolchain_version != env.updated_toolchain_version
        uses: actions/upload-artifact@v3
        with:
          name: artifact-${{ env.TOOLCHAIN_KEY }}
          path: ${{ env.TOOLCHAIN_KEY }}

  # toolchain_nightly:
  #   name: Install or update nightly toolchain
  #   runs-on: ubuntu-latest
  #   steps:
  #     # FIX: this will be stuck on sd v0.7
  #     - name: Cache cargo files
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/.crates.toml
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #         key: ${{ runner.os }}-cargo-toolchain_msrv-sd^0.7

  #     - run: cargo install sd --version ^0.7

  #     - name: Set environment variables
  #       run: |
  #         echo "HOST=$(rustc -vV | sd '(?s:.*host: (.+?)\n.*)' '$1')" >> $GITHUB_ENV

  #     - run: echo "TOOLCHAIN_NAME=$MSRV" >> $GITHUB_ENV
  #     - run: echo "TOOLCHAIN_FULL_NAME=$TOOLCHAIN_NAME-$HOST" >> $GITHUB_ENV
  #     - run: echo "TOOLCHAIN_KEY=toolchain-$TOOLCHAIN_FULL_NAME" >> $GITHUB_ENV

  #     - name: Restore toolchain key artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: artifact-${{ env.TOOLCHAIN_KEY }}
  #       continue-on-error: true

  #     - name: Restore toolchain from cache
  #       id: cache
  #       uses: martijnhols/actions-cache/restore@v3
  #       with:
  #         path: |
  #           ~/.rustup/toolchains/${{ env.TOOLCHAIN_FULL_NAME }}
  #           ~/.rustup/update-hashes/${{ env.TOOLCHAIN_FULL_NAME }}
  #         key: ${{ env.TOOLCHAIN_KEY }}-${{ hashFiles(env.TOOLCHAIN_KEY) }}

  #     - name: Set initial toolchain version to environment variable
  #       run: |
  #         echo "initial_toolchain_version<<EOF" >> $GITHUB_ENV
  #         echo "" >> $GITHUB_ENV
  #         echo "$(rustc +$TOOLCHAIN_NAME -vV)" >> $GITHUB_ENV
  #         echo "components:" >> $GITHUB_ENV
  #         echo "$(rustup component list --installed --toolchain $TOOLCHAIN_NAME)" >> $GITHUB_ENV
  #         echo "EOF" >> $GITHUB_ENV
  #       if: steps.cache.outputs.cache-hit == 'true'

  #     - name: Install or update toolchain
  #       run: rustup toolchain install $TOOLCHAIN_NAME --no-self-update --profile=minimal

  #     - name: Set updated toolchain version to environment variable
  #       run: |
  #         echo "updated_toolchain_version<<EOF" >> $GITHUB_ENV
  #         echo "" >> $GITHUB_ENV
  #         echo "$(rustc +$TOOLCHAIN_NAME -vV)" >> $GITHUB_ENV
  #         echo "components:" >> $GITHUB_ENV
  #         echo "$(rustup component list --installed --toolchain $TOOLCHAIN_NAME)" >> $GITHUB_ENV
  #         echo "EOF" >> $GITHUB_ENV

  #     - name: Save toolchain version to key file
  #       run: echo $updated_toolchain_version > $TOOLCHAIN_KEY
  #       if: env.initial_toolchain_version != env.updated_toolchain_version

  #     - name: Save toolchain to cache
  #       if: env.initial_toolchain_version != env.updated_toolchain_version
  #       uses: martijnhols/actions-cache/save@v3
  #       with:
  #         path: |
  #           ~/.rustup/toolchains/${{ env.TOOLCHAIN_FULL_NAME }}
  #           ~/.rustup/update-hashes/${{ env.TOOLCHAIN_FULL_NAME }}
  #         key: ${{ env.TOOLCHAIN_KEY }}-${{ hashFiles(env.TOOLCHAIN_KEY) }}

  #     - name: Save toolchain key artifact
  #       if: env.initial_toolchain_version != env.updated_toolchain_version
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: artifact-${{ env.TOOLCHAIN_KEY }}
  #         path: ${{ env.TOOLCHAIN_KEY }}

  msrv_and_minimal_versions:
    name: Check MSRV and minimal-versions
    runs-on: ubuntu-latest
    needs: toolchain_msrv
    steps:
      - uses: actions/checkout@v3

      # https://github.com/rust-lang/cargo/issues/8841
      # https://github.com/tensorflow/tensorboard/pull/4480#issuecomment-745904483
      # https://doc.rust-lang.org/cargo/guide/cargo-home.html
      - name: Cache cargo files
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ github.job }}

      - run: cargo install jql --version ^4
      - run: cargo install cargo-hack --version ^0.5

      # workaround for https://github.com/rust-lang/rustup/issues/2925
      - run: echo "MSRV=$(cargo metadata --format-version=1 --no-deps | jql '"packages"|={"name":"encase"}|"rust_version"' | jql -r '[0]')" >> $GITHUB_ENV

      - run: |
          echo "HOST=$(rustc -vV | sed -n 's|host: ||p')" >> $GITHUB_ENV

      - run: |
          echo "MSRV_KEY=toolchain-$MSRV-$HOST" >> $GITHUB_ENV

      - name: Restore MSRV toolchain key artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact-${{ env.MSRV_KEY }}

      - name: Restore MSRV toolchain from cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.rustup/toolchains/${{ env.MSRV }}-${{ env.HOST }}
            ~/.rustup/update-hashes/${{ env.MSRV }}-${{ env.HOST }}
          key: ${{ env.MSRV_KEY }}-${{ hashFiles(env.MSRV_KEY) }}
          required: true

      - name: Restore nightly toolchain from cache
        id: cache-nightly
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.rustup/toolchains/${{ env.NIGHTLY }}-${{ env.HOST }}
            ~/.rustup/update-hashes/${{ env.NIGHTLY }}-${{ env.HOST }}
          key: toolchain-${{ env.NIGHTLY }}-${{ env.HOST }}

      - run: |
          echo "initial-toolchain-nightly-version<<EOF" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$(rustc +$NIGHTLY -vV)" >> $GITHUB_ENV
          echo "components:" >> $GITHUB_ENV
          echo "$(rustup component list --installed --toolchain $NIGHTLY)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: steps.cache-nightly.outputs.cache-hit == 'true'

      - run: rustup toolchain install $NIGHTLY --no-self-update --profile=minimal

      - run: |
          echo "updated-toolchain-nightly-version<<EOF" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$(rustc +$NIGHTLY -vV)" >> $GITHUB_ENV
          echo "components:" >> $GITHUB_ENV
          echo "$(rustup component list --installed --toolchain $NIGHTLY)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Save nightly toolchain to cache
        if: env.initial-toolchain-nightly-version != env.updated-toolchain-nightly-version
        uses: martijnhols/actions-cache/save@v3
        with:
          path: |
            ~/.rustup/toolchains/${{ env.NIGHTLY }}-${{ env.HOST }}
            ~/.rustup/update-hashes/${{ env.NIGHTLY }}-${{ env.HOST }}
          key: ${{ steps.cache-nightly.outputs.primary-key }}

      # -Z avoid-dev-deps doesn't work
      - run: cargo +$NIGHTLY hack generate-lockfile --remove-dev-deps -Z minimal-versions
      - run: cargo +$MSRV check --workspace --all-features

  format:
    name: Check format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - run: |
          echo "HOST=$(rustc -vV | sed -n 's|host: ||p')" >> $GITHUB_ENV

      - name: Restore toolchain from cache
        id: cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.rustup/toolchains/stable-${{ env.HOST }}
            ~/.rustup/update-hashes/stable-${{ env.HOST }}
          key: toolchain-stable-${{ env.HOST }}

      - run: |
          echo "initial-toolchain-version<<EOF" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$(rustc +stable -vV)" >> $GITHUB_ENV
          echo "components:" >> $GITHUB_ENV
          echo "$(rustup component list --installed --toolchain stable)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: steps.cache.outputs.cache-hit == 'true'

      - run: rustup toolchain install stable --no-self-update --profile=minimal --component rustfmt,clippy

      - run: |
          echo "updated-toolchain-version<<EOF" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$(rustc +stable -vV)" >> $GITHUB_ENV
          echo "components:" >> $GITHUB_ENV
          echo "$(rustup component list --installed --toolchain stable)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Save toolchain to cache
        if: env.initial-toolchain-version != env.updated-toolchain-version
        uses: martijnhols/actions-cache/save@v3
        with:
          path: |
            ~/.rustup/toolchains/stable-${{ env.HOST }}
            ~/.rustup/update-hashes/stable-${{ env.HOST }}
          key: ${{ steps.cache.outputs.primary-key }}

      - run: cargo +stable fmt --check --all

  clippy:
    name: Check clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - run: |
          echo "HOST=$(rustc -vV | sed -n 's|host: ||p')" >> $GITHUB_ENV

      - name: Restore toolchain from cache
        id: cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.rustup/toolchains/stable-${{ env.HOST }}
            ~/.rustup/update-hashes/stable-${{ env.HOST }}
          key: toolchain-stable-${{ env.HOST }}

      - run: |
          echo "initial-toolchain-version<<EOF" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$(rustc +stable -vV)" >> $GITHUB_ENV
          echo "components:" >> $GITHUB_ENV
          echo "$(rustup component list --installed --toolchain stable)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: steps.cache.outputs.cache-hit == 'true'

      - run: rustup toolchain install stable --no-self-update --profile=minimal --component rustfmt,clippy

      - run: |
          echo "updated-toolchain-version<<EOF" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$(rustc +stable -vV)" >> $GITHUB_ENV
          echo "components:" >> $GITHUB_ENV
          echo "$(rustup component list --installed --toolchain stable)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Save toolchain to cache
        if: env.initial-toolchain-version != env.updated-toolchain-version
        uses: martijnhols/actions-cache/save@v3
        with:
          path: |
            ~/.rustup/toolchains/stable-${{ env.HOST }}
            ~/.rustup/update-hashes/stable-${{ env.HOST }}
          key: ${{ steps.cache.outputs.primary-key }}

      - name: Cache cargo files
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-general

      - run: cargo +stable clippy --all-targets --workspace --all-features -- -D warnings

  # doc_tests:
  #   name: Run doc tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Cache stable toolchain
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.rustup/toolchains/stable-*
  #           ~/.rustup/update-hashes/stable-*
  #         key: ${{ runner.os }}-toolchain-stable

  #     - run: rustup toolchain install stable --no-self-update --profile=minimal --component rustfmt,clippy

  #     - name: Cache cargo files
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           target/
  #         key: ${{ runner.os }}-cargo-general

  #     - run: cargo +stable test --doc --workspace --features mint,glam
