name: CI

on: [pull_request, push]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  NIGHTLY: nightly-2022-05-05

jobs:
  msrv_and_minimal_versions:
    name: Check MSRV and minimal-versions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # https://github.com/rust-lang/cargo/issues/8841
      # https://github.com/tensorflow/tensorboard/pull/4480#issuecomment-745904483
      - name: Cache cargo files
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ github.job }}

      - run: cargo install jql --version ^4
      - run: cargo install cargo-hack --version ^0.5

      # workaround for https://github.com/rust-lang/rustup/issues/2925
      - run: echo "MSRV=$(cargo metadata --format-version=1 --no-deps | jql '"packages"|={"name":"encase"}|"rust_version"' | jql -r '[0]')" >> $GITHUB_ENV

      - run: |
          echo "HOST=$(rustc -vV | sed -n 's|host: ||p')" >> $GITHUB_ENV

      - name: Restore MSRV toolchain from cache
        id: cache-msrv
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.rustup/toolchains/$MSRV-${{ env.HOST }}
            ~/.rustup/update-hashes/$MSRV-${{ env.HOST }}
          key: -toolchain-${{ env.MSRV }}-${{ env.HOST }}

      - run: |
          echo "initial-toolchain-msrv-version<<EOF" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$(rustc +$MSRV -vV)" >> $GITHUB_ENV
          echo "components:" >> $GITHUB_ENV
          echo "$(rustup component list --installed --toolchain $MSRV)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: steps.cache-msrv.outputs.cache-hit == 'true'

      - run: rustup toolchain install $MSRV --no-self-update --profile=minimal

      - run: |
          echo "updated-toolchain-msrv-version<<EOF" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$(rustc +$MSRV -vV)" >> $GITHUB_ENV
          echo "components:" >> $GITHUB_ENV
          echo "$(rustup component list --installed --toolchain $MSRV)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Save MSRV toolchain to cache
        if: env.initial-toolchain-msrv-version != env.updated-toolchain-msrv-version
        uses: martijnhols/actions-cache/save@v3
        with:
          path: |
            ~/.rustup/toolchains/$MSRV-${{ env.HOST }}
            ~/.rustup/update-hashes/$MSRV-${{ env.HOST }}
          key: ${{ steps.cache-msrv.outputs.primary-key }}

      - name: Restore nightly toolchain from cache
        id: cache-nightly
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.rustup/toolchains/$NIGHTLY-${{ env.HOST }}
            ~/.rustup/update-hashes/$NIGHTLY-${{ env.HOST }}
          key: -toolchain-${{ env.NIGHTLY }}-${{ env.HOST }}

      - run: |
          echo "initial-toolchain-nightly-version<<EOF" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$(rustc +$NIGHTLY -vV)" >> $GITHUB_ENV
          echo "components:" >> $GITHUB_ENV
          echo "$(rustup component list --installed --toolchain $NIGHTLY)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: steps.cache-nightly.outputs.cache-hit == 'true'

      - run: rustup toolchain install $NIGHTLY --no-self-update --profile=minimal

      - run: |
          echo "updated-toolchain-nightly-version<<EOF" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$(rustc +$NIGHTLY -vV)" >> $GITHUB_ENV
          echo "components:" >> $GITHUB_ENV
          echo "$(rustup component list --installed --toolchain $NIGHTLY)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Save nightly toolchain to cache
        if: env.initial-toolchain-nightly-version != env.updated-toolchain-nightly-version
        uses: martijnhols/actions-cache/save@v3
        with:
          path: |
            ~/.rustup/toolchains/$NIGHTLY-${{ env.HOST }}
            ~/.rustup/update-hashes/$NIGHTLY-${{ env.HOST }}
          key: ${{ steps.cache-nightly.outputs.primary-key }}

      # -Z avoid-dev-deps doesn't work
      - run: cargo +$NIGHTLY hack generate-lockfile --remove-dev-deps -Z minimal-versions
      - run: cargo +$MSRV check --workspace --all-features

  format:
    name: Check format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - run: |
          echo "HOST=$(rustc -vV | sed -n 's|host: ||p')" >> $GITHUB_ENV

      - name: Restore toolchain from cache
        id: cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.rustup/toolchains/stable-${{ env.HOST }}
            ~/.rustup/update-hashes/stable-${{ env.HOST }}
          key: toolchain-stable-${{ env.HOST }}

      - run: |
          echo "initial-toolchain-version<<EOF" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$(rustc +stable -vV)" >> $GITHUB_ENV
          echo "components:" >> $GITHUB_ENV
          echo "$(rustup component list --installed --toolchain stable)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: steps.cache.outputs.cache-hit == 'true'

      - run: rustup toolchain install stable --no-self-update --profile=minimal --component rustfmt,clippy

      - run: |
          echo "updated-toolchain-version<<EOF" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$(rustc +stable -vV)" >> $GITHUB_ENV
          echo "components:" >> $GITHUB_ENV
          echo "$(rustup component list --installed --toolchain stable)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Save toolchain to cache
        if: env.initial-toolchain-version != env.updated-toolchain-version
        uses: martijnhols/actions-cache/save@v3
        with:
          path: |
            ~/.rustup/toolchains/stable-${{ env.HOST }}
            ~/.rustup/update-hashes/stable-${{ env.HOST }}
          key: ${{ steps.cache.outputs.primary-key }}

      - run: cargo +stable fmt --check --all

  clippy:
    name: Check clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - run: |
          echo "HOST=$(rustc -vV | sed -n 's|host: ||p')" >> $GITHUB_ENV

      - name: Restore toolchain from cache
        id: cache
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/.rustup/toolchains/stable-${{ env.HOST }}
            ~/.rustup/update-hashes/stable-${{ env.HOST }}
          key: toolchain-stable-${{ env.HOST }}

      - run: |
          echo "initial-toolchain-version<<EOF" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$(rustc +stable -vV)" >> $GITHUB_ENV
          echo "components:" >> $GITHUB_ENV
          echo "$(rustup component list --installed --toolchain stable)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: steps.cache.outputs.cache-hit == 'true'

      - run: rustup toolchain install stable --no-self-update --profile=minimal --component rustfmt,clippy

      - run: |
          echo "updated-toolchain-version<<EOF" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$(rustc +stable -vV)" >> $GITHUB_ENV
          echo "components:" >> $GITHUB_ENV
          echo "$(rustup component list --installed --toolchain stable)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Save toolchain to cache
        if: env.initial-toolchain-version != env.updated-toolchain-version
        uses: martijnhols/actions-cache/save@v3
        with:
          path: |
            ~/.rustup/toolchains/stable-${{ env.HOST }}
            ~/.rustup/update-hashes/stable-${{ env.HOST }}
          key: ${{ steps.cache.outputs.primary-key }}

      - name: Cache cargo files
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-general

      - run: cargo +stable clippy --all-targets --workspace --all-features -- -D warnings

  # doc_tests:
  #   name: Run doc tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Cache stable toolchain
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.rustup/toolchains/stable-*
  #           ~/.rustup/update-hashes/stable-*
  #         key: ${{ runner.os }}-toolchain-stable

  #     - run: rustup toolchain install stable --no-self-update --profile=minimal --component rustfmt,clippy

  #     - name: Cache cargo files
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           target/
  #         key: ${{ runner.os }}-cargo-general

  #     - run: cargo +stable test --doc --workspace --features mint,glam
